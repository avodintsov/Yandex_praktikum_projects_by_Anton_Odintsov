# Исследование объявлений о продаже квартир

## Оглавление

+ [Описание проекта](#project_description)
+ [Описание данных](#data_description)
+ [Введение](#intro)
+ [1. Откройте файл с данными](#task_1)
    - [Задание 1.1 Загрузите данные](#task_1.1)
    - [Задание 1.2 Изучите общую информацию](#task_1.2)
    - [Задание 1.3 Постройте общую гистограмму](#task_1.3)
+ [2. Предобработка данных](#task_2)
    - [Задание 2.1 Найдите и изучите пропущенные значения](#task_2.1)
    - [Задание 2.2 Найдите и устраните редкие и выбивающиеся значения](#task_2.2)
    - [Задание 2.3 Изучите уникальные значения](#task_2.3)
+ [3. Добавьте в таблицу новые столбцы со следующими параметрами](#task_3)
+ [4. Проведите исследовательский анализ данных](#task_4)
    - [Задание 4.1 Изучите следующие параметры объектов](#task_4.1)
    - [Задание 4.2 Изучите, как быстро продавались квартиры](#task_4.2)
    - [Задание 4.3 Какие факторы больше всего влияют на общую стоимость объекта](#task_4.3)
    - [Задание 4.4 Посчитайте среднюю цену одного квадратного метра](#task_4.4)
    - [Задание 4.5 Выделите квартиры и вычислите среднюю цену каждого километра](#task_4.5)
+ [Вывод](#conclusion)

## <a name="project_description"></a>  Описание проекта

В вашем распоряжении данные сервиса Яндекс Недвижимость — архив объявлений за несколько лет о продаже квартир в Санкт-Петербурге и соседних населённых пунктах.

Ваша задача — выполнить предобработку данных и изучить их, чтобы найти интересные особенности и зависимости, которые существуют на рынке недвижимости.

О каждой квартире в базе содержится два типа данных: добавленные пользователем и картографические. Например, к первому типу относятся площадь квартиры, её этаж и количество балконов, ко второму — расстояния до центра города, аэропорта и ближайшего парка.

## <a name="data_description"></a> Описание данных

- `airports_nearest` — расстояние до ближайшего аэропорта в метрах (м)
- `balcony` — число балконов
- `ceiling_height` — высота потолков (м)
- `cityCenters_nearest` — расстояние до центра города (м)
- `days_exposition` — сколько дней было размещено объявление (от публикации до снятия)
- `first_day_exposition` — дата публикации
- `floor` — этаж
- `floors_total` — всего этажей в доме
- `is_apartment` — апартаменты (булев тип)
- `kitchen_area` — площадь кухни в квадратных метрах (м²)
- `last_price` — цена на момент снятия с публикации
- `living_area` — жилая площадь в квадратных метрах (м²)
- `locality_name` — название населённого пункта
- `open_plan` — свободная планировка (булев тип)
- `parks_around3000` — число парков в радиусе 3 км
- `parks_nearest` — расстояние до ближайшего парка (м)
- `ponds_around3000` — число водоёмов в радиусе 3 км
- `ponds_nearest` — расстояние до ближайшего водоёма (м)
- `rooms` — число комнат
- `studio` — квартира-студия (булев тип)
- `total_area` — общая площадь квартиры в квадратных метрах (м²)
- `total_images` — число фотографий квартиры в объявлении

## <a name="data_description"></a> Введение

В вашем распоряжении данные сервиса Яндекс.Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктов за несколько лет. Нужно научиться определять рыночную стоимость объектов недвижимости. Ваша задача — установить параметры. Это позволит построить автоматизированную систему: она отследит аномалии и мошенническую деятельность. 

По каждой квартире на продажу доступны два вида данных. Первые вписаны пользователем, вторые — получены автоматически на основе картографических данных. Например, расстояние до центра, аэропорта, ближайшего парка и водоёма. 

###  <a name="task_1"></a> 1. Откройте файл с данными и изучите общую информацию. 

#### <a name="task_1.1"></a>  1.1 Загрузите данные из файла в датафрейм.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
%matplotlib inline

# data = pd.read_csv('/datasets/real_estate_data.csv', sep = '\t')

from io import BytesIO
import requests
import pandas as pd
spreadsheet_id = '1PVE_U8KnP2tFdb48u0psELUNaI4EowvMyG5HAoCcsbU'
file_name = 'https://docs.google.com/spreadsheets/d/{}/export?format=csv'.format(spreadsheet_id)
r = requests.get(file_name)
data = pd.read_csv(BytesIO(r.content))
data

#### <a name="task_1.2"></a>  1.2 Изучите общую информацию о полученном датафрейме.

data.info()

- Мы видим что столбец "first_day_exposition" имеет тип данных object, а по идее это должен быть столбец с датами и временем. Тип данных столбца мы исправим ниже по ходу решения.
- Также многие из столцов можно перевести в тип int, так как в них представлены целочисленные данные. Это мы тоже исправляем ниже.

#### <a name="task_1.3"></a>  1.3 Постройте общую гистограмму для всех столбцов таблицы. Например, для датафрейма data это можно сделать командой data.hist(figsize=(15, 20)).

data.hist(figsize=(15, 20));

Гистограммы "last_price", "total_area" и "ceiling_hight" выглядят странно и совсем не информативно. Скорее всего это происходит, потому что в данных есть выбросы, то есть какие-то значения, которые очень сильно отличаются от основной массы данных. С выбросами мы поработаем ниже в проекте и еще так же ниже мы еще раз перестроим эти гистограммы в более наглядном виде.



### <a name="task_2"></a> 2. Предобработка данных

#### <a name="task_2.1"></a> 2.1 Найдите и изучите пропущенные значения в столбцах:

**Определяем, в каких столбцах есть пропуски.**

data.isna().sum()



**Заполните пропущенные значения там, где это возможно. Например, если продавец не указал число балконов, то, скорее всего, в его квартире их нет. Такие пропуски правильно заменить на 0. Если логичную замену предложить невозможно, то оставьте эти значения пустыми. Пропуски — тоже важный сигнал, который нужно учитывать.**

В столбце 'balcony' пропущенные некоторые значения, скорее всего это означает что балконов в квартире просто нет, поэтому заменим эти значения на 0 и преобразуем все значения в столбце на целочисленные данные, так как колличество балконов не может быть дробным.

data['balcony'] = data['balcony'].fillna(0).astype(int)
display(data['balcony'].value_counts())

Убираем пустые значения в столбце с колличеством этажей

data = data.dropna(subset = ['floors_total']).reset_index(drop=True)

Заменяем пустые значения на медианные в столбце 'ceiling_height', так же отрезаем все строки, где высота потолков больше 10 метров и удаляем их.

import warnings

warnings.filterwarnings("ignore")

replace_with_median = data.groupby('floors_total')['ceiling_height'].median()

for total in data['floors_total'].unique():
    data.loc[(data['floors_total'] == total) & (data['ceiling_height'].isna()), 'ceiling_height'] = replace_with_median[total]

data.loc[data['ceiling_height'] > 10,'ceiling_height'] = None
data = data.dropna(subset=['ceiling_height'])
print(data['ceiling_height'][data['ceiling_height'] > 10].count())

Проверим столбец с колличеством комнат

data['rooms'].unique()
data['rooms'].value_counts()

Дополнительный тестовый фильтр, чтобы посмотреть, какие действительно квартиры имеют 0 комнат в изначальных данных.


test_2 = data.loc[data['rooms'] == 0]
test_2['studio'].value_counts()

Мы видим, что из всех квартир с нулем комнат, 135 действительно являются студиями, но 58 (более 30 процентов) не являются студиями, или продавец забыл это указать.


test_3 = data.loc[data['studio'] == True]
test_3['rooms'].value_counts()

Мы видим, что из всех квартир студий, 135 имеют ноль в парамере комнат, а 11 имеют 1 в параметре комнат.


# Заменяем нулевые значения на 1
data['rooms'] = data['rooms'].replace(0, 1)
# Проверка
data['rooms'].describe()

Я считаю, что чтобы в будущем не путаться, где у нас студия, где нет, и сколько в ней должно быть комнат, следует, все-таки заменить нулевое колличество комнат на 1, но при этом у этих квартир в параметре студия все равно останется пометка, что они являются студией, и если нам понадобиться, мы всегда сможем отобрать и посмотреть их отдельно от всех остальных квартир. 


Проверяем столбец с площадью квартир

data['total_area'].describe()

В данных присутствует необычная квартира с площадью 900 кв метров, возьмем ее на заметку

Проверяем столбец с ценой на момент снятия с публикации

data['last_price'].describe()

В данных есть квартира за 73 млн рублей, это много по сравнению с средней ценой в 6.5 млн, но в целом, такая цена реальна. Так же есть квартира за 430к, как по мне, это слишком низкая цена за квартиру.

#### <a name="task_2.2"></a> 2.2 Найдите и устраните редкие и выбивающиеся значения.

Приведем данные к более реальному виду, без экстремаьлно дешевых квартир, высоченных потолков и огромных площадей.

data.info()

data = data.query('last_price > 500000 & rooms <= 10 & (total_area > 30 | total_area < 600)')

data.info()

Как мы видим, перед фильтрацие у нас было 23586 строк данных, а после фильтрации осталось 23560. Это означает, что было отброшено ~1.1% данных.


Там где это возможно, заменяем пропущенные значения на медианные, там, где по каким либо причинам мы не можем раасчитать медианы, пока просто заменяем пропущенные значения на 0.

for col in data.columns:
    if col in [
        'ceiling_height',
    ]:
        data[col] = data[col].fillna(value=data[col].median())
        
    elif col in [
        'is_apartment',
        'balcony',
        'airports_nearest',
        'parks_around_3000',
        'ponds_around_3000',
        'parks_nearest',
        'ponds_nearest',
        'days_exposition'
    ]:
        data[col] = data[col].fillna(value=0)
        
    elif col == 'floors_total':
        data[col] = data[col].where(~data[col].isna(), data['floor'])

Заменяем пропущенные значения на медианы в столбце 'kitchen_area'. Медианы берем не общие, а по колличеству комнат в этих квартирах. Более логично что в квартирах где мало комнат, будут маленькие кухни, а в многокомнатных квартирах и кухню можно сделать побольше.

rep_with_med_kitchen = data.groupby('rooms')['kitchen_area'].median()

for total in data['rooms'].unique():
    data.loc[(data['rooms'] == total) 
           & (data['kitchen_area'].isna()), 'kitchen_area'] = rep_with_med_kitchen[total]

Удаляем все строки в которых не получилось сделать замену на медиану

data.loc[data['kitchen_area'] == 'nan','kitchen_area'] = None
data = data.dropna(subset=['kitchen_area'])
# display(data['kitchen_area'].value_counts())
# display(data['kitchen_area'].unique())

Заменяем пропуски в столбце 'living_area' на медианы, так же в зависимости от колличества комнат в квартире.

rep_with_med_rooms = data.groupby('rooms')['living_area'].median()

for total in data['rooms'].unique():
    data.loc[(data['rooms'] == total) 
             & (data['living_area'].isna()), 'living_area'] = rep_with_med_rooms[total]

Заемняем пропущенные значения в столбце апартаментов на False

data['is_apartment'] = data['is_apartment'].fillna(False)

Заменяем тип данных в столбце с колличеством этажей на целочисленный

data['floors_total'] = data['floors_total'].astype(int)

#### <a name="task_2.3"></a> 2.3 Изучите уникальные значения в столбце с названиями и устраните неявные дубликаты.

Исключаем пропуски в столбце с названием начеленного пункта, затем заменяем ё на е, чтобы исключить повторения типа 'посёлок' и 'поселок'. После этого приводим типы поселков к одному виду.

data = data.dropna(subset=['locality_name'])
data['locality_name'] = data['locality_name'].str.replace('ё','е')
data['locality_name'] = data['locality_name'].str.replace('поселок городского типа','городской поселок')



### <a name="task_3"></a> 3. Добавьте в таблицу новые столбцы со следующими параметрами:

- цена одного квадратного метра;

data['area_price'] = data['last_price'] / data['total_area']

Для начала приводим столбец с датой к удобному виду, оставляя только год, месяц и день

data['first_day_exposition'] = pd.to_datetime(data['first_day_exposition'], format='%Y-%m-%dT%H:%M:%S')

- день недели публикации объявления (0 — понедельник, 1 — вторник и так далее);

data['day_of_announcement'] = data['first_day_exposition'].dt.weekday

- месяц публикации объявления;

data['month_of_announcement'] = data['first_day_exposition'].dt.month

- год публикации объявления;

data['year_of_announcement'] = data['first_day_exposition'].dt.year

- тип этажа квартиры (значения — «‎первый», «последний», «другой»);

def floor_type(row):
    if row['floor'] == 1:
        category = 'Первый'
    elif (row['floor'] != 1) & (row['floor'] == row['floors_total']):
        category = 'Последний'
    else:
        category = 'Другой'
    return category

data['floor_category'] = data.apply(floor_type, axis=1)

- расстояние до центра города в километрах (переведите из м в км и округлите до целых значений).

data['dist_to_centre_in_km'] = (data['cityCenters_nearest']/1000).round()

Проверим наличие наших новых столбцов в таблице

data

### <a name="task_4"></a> 4. Проведите исследовательский анализ данных:

#### <a name="task_4.1"></a> 4.1 Изучите следующие параметры объектов:

- общая площадь;

data.hist('total_area', bins=50, figsize = (10,5), range=(10,200))
plt.show()
print(data['total_area'].describe())

Гистограмма по площади квартир. Пик нахидится в диапазоне 25-50 квадратных метров. Квартиры площадью меньше 25кв метров практически отсутствуют (мы все таки не в Гонкоге), и квартир площадью больше 150 квадратов тоже очень мало.

- жилая площадь;

data.hist('living_area', bins=50, figsize = (10,5), range=(10,130))
plt.show()
print(data['living_area'].describe())

Гистограмма по жилой площади в квартирах. Здесь мы можем наблюдать два пика. Достаточно много квартир с жилой площадью чуть меньше 20 квадратных метром, но еще больше квартир с жилой площадью около 30 кв метров.

- площадь кухни;

data.hist('kitchen_area', bins=50, figsize = (10,5), range=(0,50))
plt.show()
print(data['kitchen_area'].describe())

Гистограмма по площади кухни. Пик находится на площади в примерно 10кв метров. Есть достаточно много квартир с меньшей площадью кухни.

- цена объекта;

data.hist('last_price', bins=50, figsize = (10,5), range=(0,30000000))
plt.show()
print(data['last_price'].describe())

Гистограмма по стимости продажи квартиры. Пик находится в районе 3-4 млн рублей за квартиру.

- количество комнат;

data.hist('rooms', bins=data['rooms'].max(), figsize = (10,5), range=(1,8))
plt.show()
print(data['rooms'].describe())

Гистограмма по колличеству комнат в квартирах. В основном присутсвуют квартиры с 1-3 комнатами. Редко встречаются квартиры с 7ю комнатами.

- высота потолков;

data.hist('ceiling_height', bins=15, figsize = (10,5), range=(2,5))
plt.show()
print(data['ceiling_height'].describe())

Гистограмма по выстоте потолков. В основном квартиры имеют высоту потолков от 2.5 до 3 метров.

- этаж квартиры;

data.hist('floor', bins=25, figsize = (10,5), range=(0,35))
plt.show()
print(data['floor'].describe())

Гистограмма по этажу квартиры. В основном квартиры находятся ниже 5-ого этажа, есть так же локальный пик в районе 8ого этажа.

- тип этажа квартиры («первый», «последний», «другой»);

test = data['floor_category'].value_counts()
test.plot(kind='bar')
plt.show()
# print(data['floor_category'].describe())

Гистограмма по типу этажа. Мы видим что в основном квартиры расположены не на первом и не на последнем этаже.

- общее количество этажей в доме;

data.hist('floors_total', bins=25, figsize = (10,5), range=(0,35))
plt.show()
print(data['floors_total'].describe())

Гистограмма по общему колличеству этажей в доме, в котором продается квартира. В основном дома 5ти этажные или 9ти этажные, но втречаются и гораздо более высокие дома.

- расстояние до центра города в метрах;

data.hist('cityCenters_nearest', bins=50, figsize = (10,5), range=(0,40000))
plt.show()
print(data['cityCenters_nearest'].describe())

Гистограмма по расстоянию до центра города. Можно увидеть два пика, первый более низкий, где расстояние до центра примерно 5км и второй более высокий пик, для расстояния до центра в примерно 15км.

- расстояние до ближайшего аэропорта;

data.hist('airports_nearest', bins=40, figsize = (10,5), range=(0,70000))
plt.show()
print(data['airports_nearest'].describe())

Гистограмма для расстояния до аэропорта. Здесь мы вдим большой столбец в нуле, это означает, что скорее всего там нет данных по расстоянию до аэропорта. Дальше квартиры распределены практически равномерно с расстояниями от 10 км до 50 км до ближайшего аэропорта.

- расстояние до ближайшего парка;

data.hist('parks_nearest', bins=40, figsize = (10,5), range=(0,1000))
plt.show()
print(data['parks_nearest'].describe())

data.hist('parks_nearest', bins=40, figsize = (10,5), range=(1,1000))
plt.show()
print(data['parks_nearest'].describe())

Гистограммы для удаление квартиры от парка. Первая содержит большое колличество нулевых значений, поэтому там невозможно оценить удаленность остальных квартир от парка. На второй диаграмме мы отрезаем нулевые значения и можем увидеть, что удаленноть квартир от парков распрелелена нормально с средней удаленностью примерно в 450 метров.

- день и месяц публикации объявления.

data.hist('day_of_announcement', bins=7, figsize = (10,5), range=(0,6))
plt.show()
print(data['day_of_announcement'].describe())

Гистограмма для дня публикации объявления. Можно увидеть, что в основном объявления публикуются с вторника по пятницу, в выходные наблюдается сильно снижение колличества публикаций.

data.hist('month_of_announcement', bins=12, figsize = (10,5), range=(1,12))
plt.show()
print(data['month_of_announcement'].describe())

Гистограмма по месяцам публикации объявлений. Мы видим, что достаточно много объявлений публикуетсяв феврале и марте, а так же осенью.

#### <a name="task_4.2"></a> 4.2 Изучите, как быстро продавались квартиры (столбец days_exposition). Этот параметр показывает, сколько дней было размещено каждое объявление.

- Постройте гистограмму.

data.hist('days_exposition', bins=100, figsize = (10,5), range=(0,800))
plt.show()
print(data['days_exposition'].describe())

Посчитайте среднее и медиану.

# Средняя
data['days_exposition'].mean()

# Медиана
data['days_exposition'].median()

В среднем продажа квартиры с момента появления объявления происходит за 156 дней. Быстрыми мы можем считать продажи, которые произошли быстрее чем через 73 дня.



data['days_exposition'].loc[data['days_exposition'] > 365].count()


Как мы видим, в данных присутствуют квартиры, которые не могут продать уже более года, причем таких квартир достаточно много (~11%). 


Если ориентироваться на квантили:
    
 - быстро продавались квартиры, которые были в объявлениях меньше 22 дней
 - долго продавались квартиры, которые висели более 198 дней


#### <a name="task_4.3"></a> 4.3 Какие факторы больше всего влияют на общую (полную) стоимость объекта?

В начале просто посмотрим корреляцию цен с остальными параметрами квартиры.

print(data.corr()[['last_price', 'area_price']].sort_values(by = 'area_price', ascending = False))



Построим корреляцию площади квартиры и цены за квадратный метр. При этом не будем учитывать квартиры больше 200кв метров.

data.query('total_area<200').pivot_table(
    index='total_area', values='area_price', aggfunc='median'
).plot(style='o');



Корреляция цены и жилой площади.

data.query('total_area<200').pivot_table(
    index='living_area', values='area_price', aggfunc='median'
).plot(style='o-', figsize = (15,5));



Корреляция цены и площади кухни

data.query('total_area<200').pivot_table(
    index='kitchen_area', values='area_price', aggfunc='median'
).plot(style='o-', figsize = (15,5));



Корреляция цены и колличества комнат

data.query('total_area<200').pivot_table(
    index='rooms', values='area_price', aggfunc='median'
).plot(style='o-', figsize = (15,5));



Корреляция цены и этажа, на котором расположена квартира

data.query('total_area<200').pivot_table(
    index='floor', values='area_price', aggfunc='median'
).plot(style='o-', figsize = (15,5));



Корреляция цены и даты размещения

data.query('total_area<200').pivot_table(
    index='days_exposition', values='area_price', aggfunc='median'
).plot(style='o-', figsize = (15,5));


Как мы видим, квартиры, которые размещены недавно, имеют достаточно не большой разброс по ценам и при этом все имеют не очень высокую цену. Мы видим, что это не дорогие квартиры, которые имеют высокую ликвидность и соответственно такие квартиры не задерживаются на долго на досках объявлений. Чем больше времени с публикации объявления, тем больше разброс по ценам, мало покупателей найдется на очень дорогие квартиры, поэтому такие объявления могут висеть очень долго. Чем выше цена, тем меньше ликвидность квартиры и тем дальше покупатели будут выбирать и определяться с покупкой.





Из построенных выше графиков мы можем сказать, от каких параметров стоимость квартиры зависит сильно, а от каких – нет.

- По графику общей площади видно, что в целом цена квадратного метра не сильно изменяется в зависимости от общей площади квартиры, однако некоторые квартиры, все-таки начинают стоить больше (за один квадратный метр) с увеличением общей площади. Это может быть связано с тем, что квартиры большей площади как правило более элитные и их один квадратный метр может цениться больше, чем в маленьких, менее элитных квартирах.

- По графику жилой площади мы тоже можем сказать, что цена квадратного метра не сильно меняется в зависимости от размера жилой площади.

- На графике площади кухни мы видим, что квартиры с более большой площадью кухни и имеют немного большую стоимость квадратного метра и так же на графике мы можем увидеть сильный выброс с большой площадью кухни и стоимостью квадратного метра более 800т рублей.

- На графике количества комнат отличия уже более существенны. Один квадратный метр в однокомнатной квартире стоит дороже, чем в 2–6 комнатных квартирах, однако, начиная с 7-комнатных квартир, цена квадратного метра резко возрастает. Самыми дешевыми за квадратный метр являются 3-комнатные квартиры.

- На графике этажности квартиры мы видим, что этажи очень по-разному влияют на цену квадратного метра в квартире. 5и 9 этажи стоят сильно дешевле по сравнению с соседними, скорее всего это связано с тем, что часто эти этажи являются последними и никто не хочет жить на последнем этаже (с протекающей крышей и шумящим лифтом). Далее ценя за квадратный метр уже, не сильно меняется и падает только в районе 25-го этажа, а затем резко растет на 30ом этаже, но скорее всего это результат единичных не репрезентативных данных.

- Дата размещения не очень сильно влияет на цену квадратного метра. Для квартир, которые опубликованы до 300 дней назад цена квадратного метра имеет не большой разброс. Далее разброс увеличивается и среднем цена за квадратный метр понемногу растет, скорее всего это связано с тем, что долго висят более дорогие квартиры (такие квартиры имеют меньшую ликвидность), которые имеют более элитные ремонты и находится в более элитных районах, соответственно квадратный метр в таких квартирах будет стоить больше.


#### <a name="task_4.4"></a> 4.4 Посчитайте среднюю цену одного квадратного метра в 10 населённых пунктах с наибольшим числом объявлений. Выделите населённые пункты с самой высокой и низкой стоимостью квадратного метра. Эти данные можно найти по имени в столбце locality_name.

loc_prices = data['locality_name'].value_counts().sort_values(ascending = False).head(10)
display(loc_prices)



Посчитаем среднюю чену квадратного метра в каждом населенном пункте

data.query('locality_name in @loc_prices.index').pivot_table(
    index='locality_name', values='area_price', aggfunc='median'
).sort_values('area_price').plot(kind='bar');

#### <a name="task_4.5"></a> 4.5 Выделите квартиры в Санкт-Петербурге с помощью столбца locality_name и вычислите среднюю цену каждого километра. Опишите, как стоимость объектов зависит от расстояния до центра города.

data['cityCenters'] = (data['cityCenters_nearest']/1000).dropna().astype(int)
# data.head(10)



Посчитаем среднюю цену каждого километра.

data['price_km'] = data['last_price'] / data['cityCenters'].dropna().astype(int)
data.head(10)

data.query('cityCenters<40').boxplot('price_km', by='cityCenters', figsize=(20,10));


На графике boxplot более наглядно видно, что цена  действительно зависит от расстояния до центра. Чем ближе квартира находится к центру, тем скорее всего выше будет ее цена.


data.pivot_table(
    index='cityCenters', values='price_km'
).plot(style='o-', figsize = (15,5));

Здесь хорошо видно, что в первые несколько километров от центра, расстояние до него сильно влияет на стоимость квартиры, но дальше 15-ого километра цена уже не так сильно меняется, что означает, что дальше людям уже безразлично в 15 километрах они или в 50-ти.


### <a name="conclusion.5"></a> Общий вывод

После окончания исследования стоимости квартир в Санкт-Петербурге и близлежащий населенных пунктах можно сделать следующие выводы:

- Что влияет на стоимость квартиры и в какой степени:
    - Стоимость квартиры зависит от большого количества параметров. Все параметры в разной степени влияют на стоимость квартиры, какие-то в большей степени, какие-то в меньшей.

- Как влияют параметры самой квартиры:
    - Площадь кухни и общая площадь квартиры оказывают самое большое влияние на цену квартиры в положительную сторону.
    - В основном в продаже находятся квартиры от 25 кв метров и до 80.
    - На рынке превалируют квартиры с 2–3 комнатами, большее количество комнат встречается очень редко.
    - Диапазон высоты потолков тоже не очень большой. В основном это от 2.5 до 3-х метров.
    - В Питере и окрестностях в основном продаются квартиры на не высоких этажах (большая часть до 5–6 этажа).
    
- Как влияет география и инфраструктура:
    - Расстояние от центра оказывает самое большое отрицательное влияние на цену квартиры. Чем ближе к центру, тем выше цена квартиры, но после примерно десяти километров удаления от центра этот параметр почти теряет свое влияние на ценообразование квартиры.
    - Достаточно много квартир находится на расстоянии около 5 километров от центра и следующий, самый большой пик плотности квартир находится на расстоянии 15 километров от центра.
    - Наличие парка в пешей доступности от квартиры тоже оказывает сильное влияние на стоимость, в Питере бОльшое количество квартир находится в пределе одного километра от парка.
    
- Общие показатели:
    - Средняя стоимость, по которой продаются квартиры в Питере и его пригороде находится в районе 3–4 млн рублей.
    
- Статистика по объявлениям:
    - Объявления о продаже квартир в основном публикуются в будние дни и самые оживленные сезоны — это конец зимы и конец осени.
    - В среднем квартиры продаются за 4–5 месяцев.
    - Быстрее всего продаются квартиры с маленькой ценой и высокой ликвидностью.

